# 164. Maximum Gap

给定一个无序的数组 `nums`，返回 *数组在排序之后，相邻元素之间最大的差值* 。如果数组元素个数小于 2，则返回 `0` 。

您必须编写一个在「线性时间」内运行并使用「线性额外空间」的算法。

 

**示例 1:**

```
输入: nums = [3,6,9,1]
输出: 3
解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。
```

**示例 2:**

```
输入: nums = [10]
输出: 0
解释: 数组元素个数小于 2，因此返回 0。
```

 

**提示:**

-   `1 <= nums.length <= 105`
-   `0 <= nums[i] <= 109`



**使用 Counting Sort & Radix Sort**

```java
class Solution {
  public int maximumGap(int[] nums) {
    int n = nums.length;
    if (n == 1) return 0;

    int weight = 1;
    int[] buf = new int[n];

    int maxNum = Arrays.stream(nums).max().getAsInt();

    while (weight <= maxNum) {
      // simple occurrences
      int[] count = new int[10];
      for (int i = 0; i < n; i++) {
        // identify column
        int digit = (nums[i] / weight) % 10;
        count[digit]++;
      }

      // multiple occurrences
      for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
      }

      // correct item positioning
      for (int i = n - 1; i >= 0; i--) {
        int digit = (nums[i] / weight) % 10;
        buf[count[digit] - 1] = nums[i];
        count[digit]--;
      }

      // copy from buf to nums
      System.arraycopy(buf, 0, nums, 0, n);
      weight *= 10;
    }

    int res = 0;
    for (int i = 1; i < n; i++) {
      res = Math.max(nums[i] - nums[i - 1], res);
    }

    return res;
  }
}
```

